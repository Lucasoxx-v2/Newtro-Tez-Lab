
{
  "htmlContent": "<!-- \n  DOCUMENT DESCRIPTION:\n  This JSON file contains a single key, 'htmlContent', which holds a complete, self-contained HTML version of the Tez Lab web application.\n\n  PURPOSE:\n  It's designed to be a portable, framework-free blueprint of the original React application. It uses only vanilla JavaScript and embedded CSS to replicate the full functionality and styling.\n  This file serves as:\n  1. A comprehensive technical guide to the application's architecture.\n  2. A standalone prototype that can be run directly in a browser.\n  3. A base for porting the application to other technologies or environments.\n\n  KEY FEATURES DOCUMENTED IN THE CODE:\n\n  - STYLE & AESTHETICS (Embedded CSS):\n    - Dark Mode First: The UI is built on a dark, modern aesthetic with a high-contrast accent color.\n    - Color Palette: Defines primary, text, UI, and blockchain-specific colors for a cohesive look.\n    - Typography: Uses the 'Inter' font family with a clear typographic scale for readability.\n    - Responsive Design: A fluid layout that adapts from mobile to large desktop screens using media queries.\n    - Animations: Subtle animations for loading states, fade-in effects, and interactive feedback.\n\n  - FUNCTIONALITY & LOGIC (Vanilla JavaScript):\n    - State Management: A simple, centralized state object manages the application's status (current view, data, loading states, errors).\n    - API Interaction: Functions for fetching data from TzKT.io and Objkt.com GraphQL endpoints.\n    - Caching (Stale-While-Revalidate): An aggressive caching strategy using localStorage to provide an instant UI response. The app shows cached (stale) data immediately while fetching fresh data in the background.\n    - Component-Based Rendering: JavaScript functions are organized to mimic components, each responsible for rendering a specific part of the UI (e.g., NftGrid, ArtistCard, ModalViewer).\n    - Dynamic DOM Manipulation: Content is rendered by creating and manipulating DOM elements directly, without a virtual DOM.\n\n  - SECTIONS & DESCRIPTIONS (HTML & JS Comments):\n    - Collection Explorer: An open-ended tool to explore any Tezos NFT collection by its contract address.\n    - Collective Drops: A curated gallery showcasing specific collections from the Newtro Arts Collective.\n    - Newtro Index: A catalog of artists from the collective, with profiles and links to their works.\n    - Experiments (Architypes Composer): An interactive tool to create typographic art using animated letter NFTs. Includes functionality to export creations as PNG or GIF files.\n    - Onboarding: A resource section with embedded YouTube video tutorials for crypto beginners.\n\n  Each block of code within the HTML string is heavily commented to explain its purpose and logic, fulfilling the request for an exhaustive guide.\n-->\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Tez Lab (Standalone Version)</title>\n    <link rel=\"preconnect\" href=\"https://fonts.googleapis.com\">\n    <link rel=\"preconnect\" href=\"https://fonts.gstatic.com\" crossorigin>\n    <link href=\"https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap\" rel=\"stylesheet\">\n    <style>\n        /* \n        =================================================================\n        STYLE GUIDE & EMBEDDED CSS\n        This section replicates the original Tailwind CSS configuration \n        and custom styles using pure CSS. It defines the application's \n        entire visual identity.\n        =================================================================\n        */\n\n        /* --- 1. CSS VARIABLES & COLOR PALETTE --- */\n        /* Description: Centralized color definitions for consistency. */\n        :root {\n            --color-accent: #bcfe04;\n            --color-dark-primary: #121212;\n            --color-dark-secondary: #1a1a1a;\n            --color-text-primary: #f3f4f6; /* Lighter gray for main text */\n            --color-text-secondary: #9ca3af; /* Medium gray for subtitles */\n            --color-text-tertiary: #6b7281; /* Darker gray for less important info */\n            --color-text-on-accent: #121212;\n            --color-border: #374151;\n            --color-evm-blue: #485de4;\n            --color-tezos-green: #d1f121;\n            --color-solana-purple: #470f4f;\n            --font-sans: 'Inter', sans-serif;\n        }\n\n        /* --- 2. BASE & RESET STYLES --- */\n        /* Description: A minimal reset for cross-browser consistency and base styling. */\n        * {\n            box-sizing: border-box;\n            margin: 0;\n            padding: 0;\n        }\n        html {\n            scroll-behavior: smooth;\n        }\n        body {\n            background-color: var(--color-dark-primary);\n            color: var(--color-text-primary);\n            font-family: var(--font-sans);\n            min-height: 100vh;\n            display: flex;\n            flex-direction: column;\n        }\n        main {\n          flex-grow: 1;\n        }\n\n        /* --- 3. ANIMATIONS --- */\n        /* Description: Keyframe animations used throughout the app for visual feedback. */\n        @keyframes fadeIn {\n            from { opacity: 0; }\n            to { opacity: 1; }\n        }\n        @keyframes spin {\n            from { transform: rotate(0deg); }\n            to { transform: rotate(360deg); }\n        }\n\n        /* --- 4. LAYOUT & UTILITY CLASSES --- */\n        /* Description: Reusable classes for layout, spacing, and typography, mimicking Tailwind. */\n        .container {\n            width: 100%;\n            margin-left: auto;\n            margin-right: auto;\n            padding-left: 1rem;\n            padding-right: 1rem;\n        }\n        .hidden { display: none !important; }\n        .animate-fade-in { animation: fadeIn 0.5s ease-in-out; }\n        .p-4 { padding: 1rem; }\n        .p-8 { padding: 2rem; }\n        .mb-8 { margin-bottom: 2rem; }\n        .text-center { text-align: center; }\n        .mx-auto { margin-left: auto; margin-right: auto; }\n        .flex { display: flex; }\n        .items-center { align-items: center; }\n        .justify-center { justify-content: center; }\n        .justify-between { justify-content: space-between; }\n        .gap-2 { gap: 0.5rem; }\n        .gap-3 { gap: 0.75rem; }\n        .gap-4 { gap: 1rem; }\n        .text-3xl { font-size: 1.875rem; line-height: 2.25rem; }\n        .text-lg { font-size: 1.125rem; line-height: 1.75rem; }\n        .text-sm { font-size: 0.875rem; line-height: 1.25rem; }\n        .text-xs { font-size: 0.75rem; line-height: 1rem; }\n        .font-bold { font-weight: 700; }\n        .font-medium { font-weight: 500; }\n        .font-semibold { font-weight: 600; }\n        .font-mono { font-family: monospace; }\n        .text-white { color: #fff; }\n        .text-gray-400 { color: var(--color-text-secondary); }\n        .text-gray-500 { color: var(--color-text-tertiary); }\n        .text-accent { color: var(--color-accent); }\n        .tracking-tight { letter-spacing: -0.025em; }\n        .rounded-lg { border-radius: 0.5rem; }\n        .rounded-md { border-radius: 0.375rem; }\n        .rounded-full { border-radius: 9999px; }\n        .max-w-xl { max-width: 36rem; }\n        .max-w-4xl { max-width: 56rem; }\n\n        /* --- 5. COMPONENT STYLES --- */\n        /* Description: Specific styles for UI elements like Header, Buttons, Inputs, Cards, etc. */\n        \n        /* Header */\n        .app-header {\n            background-color: rgba(26, 26, 26, 0.8);\n            backdrop-filter: blur(4px);\n            position: sticky;\n            top: 0;\n            z-index: 40;\n            border-bottom: 1px solid var(--color-border);\n        }\n        .app-header .header-content { display: flex; align-items: center; justify-content: space-between; height: 4rem; }\n        .nav-buttons { display: flex; align-items: center; gap: 0.25rem; background-color: #374151; padding: 0.25rem; border-radius: 0.5rem; }\n        .nav-button {\n            background-color: transparent;\n            border: none;\n            padding: 0.5rem 1rem;\n            border-radius: 0.375rem;\n            font-size: 0.875rem;\n            font-weight: 500;\n            color: var(--color-text-primary);\n            cursor: pointer;\n            transition: all 0.2s ease-in-out;\n        }\n        .nav-button:hover { background-color: var(--color-dark-secondary); color: white; }\n        .nav-button.active { background-color: var(--color-accent); color: var(--color-text-on-accent); }\n\n        /* Buttons & Inputs */\n        .btn {\n            background-color: var(--color-accent);\n            color: var(--color-text-on-accent);\n            font-weight: 600;\n            padding: 0.5rem 1rem;\n            border-radius: 0.375rem;\n            border: none;\n            cursor: pointer;\n            transition: background-color 0.2s ease-in-out;\n        }\n        .btn:hover:not(:disabled) { background-color: rgba(188, 254, 4, 0.8); }\n        .btn:disabled { background-color: #6b7281; cursor: not-allowed; }\n\n        .input-field {\n            background-color: var(--color-dark-secondary);\n            border: 1px solid var(--color-border);\n            color: var(--color-text-primary);\n            font-size: 0.875rem;\n            border-radius: 0.5rem;\n            width: 100%;\n            padding: 0.625rem;\n            transition: all 0.2s ease-in-out;\n        }\n        .input-field::placeholder { color: var(--color-text-secondary); }\n        .input-field:focus { outline: none; border-color: var(--color-accent); box-shadow: 0 0 0 1px var(--color-accent); }\n\n        /* Loader */\n        .loader {\n            display: flex; justify-content: center; align-items: center; padding: 2rem;\n        }\n        .loader-spinner {\n            width: 3rem; height: 3rem; border: 4px solid var(--color-accent); border-top-color: transparent; border-radius: 50%; animation: spin 1s linear infinite;\n        }\n\n        /* Error Message */\n        .error-message { \n            text-align: center; color: #f87171; background-color: rgba(153, 27, 27, 0.2); \n            padding: 0.75rem; border-radius: 0.375rem; max-width: 36rem; margin: auto;\n        }\n\n        /* NFT Grid & Cards */\n        .nft-grid {\n            display: grid; gap: 1rem;\n            grid-template-columns: repeat(2, minmax(0, 1fr));\n        }\n        .nft-card {\n            position: relative; aspect-ratio: 1 / 1; background-color: var(--color-dark-secondary); border-radius: 0.5rem;\n            overflow: hidden; cursor: pointer; border: 2px solid transparent; transition: all 0.3s ease;\n            box-shadow: 0 4px 6px -1px rgba(0,0,0,0.1), 0 2px 4px -1px rgba(0,0,0,0.06);\n        }\n        .nft-card:hover { border-color: var(--color-accent); box-shadow: 0 0 15px rgba(188, 254, 4, 0.2); transform: translateY(-4px); }\n        .nft-card img {\n            width: 100%; height: 100%; object-fit: cover; transition: transform 0.3s ease-in-out;\n        }\n        .nft-card:hover img { transform: scale(1.1); }\n        .nft-card .overlay {\n            position: absolute; inset: 0; background: linear-gradient(to top, rgba(0,0,0,0.8), transparent);\n            opacity: 0; transition: opacity 0.3s ease-in-out;\n            display: flex; align-items: flex-end; padding: 0.5rem;\n        }\n        .nft-card:hover .overlay { opacity: 1; }\n        .nft-card .overlay-text { \n            color: white; font-size: 0.75rem; font-weight: 500; \n            white-space: nowrap; overflow: hidden; text-overflow: ellipsis; \n        }\n        .nft-card-loader { \n          position: absolute; inset: 0; display: flex; align-items: center; justify-content: center; \n        }\n        .nft-card-loader .spinner { \n          width: 1.5rem; height: 1.5rem; border: 2px dashed #6b7281; border-radius: 50%; animation: spin 1.5s linear infinite; \n        }\n\n        /* Artist Card */\n        .artist-card {\n            position: relative; aspect-ratio: 1/1; background-color: var(--color-dark-secondary); border-radius: 0.5rem;\n            overflow: hidden; cursor: pointer; border: 2px solid transparent; transition: all 0.3s ease;\n            box-shadow: 0 4px 6px -1px rgba(0,0,0,0.1), 0 2px 4px -1px rgba(0,0,0,0.06);\n        }\n        .artist-card:hover { border-color: var(--color-accent); box-shadow: 0 0 15px rgba(188, 254, 4, 0.2); transform: translateY(-4px); }\n        .artist-card .pfp-bg {\n          position: absolute; inset: 0; transition: transform 0.5s ease-in-out;\n        }\n        .artist-card:hover .pfp-bg { transform: scale(1.1); }\n        .artist-card .pfp-bg img { width: 100%; height: 100%; object-fit: cover; }\n        .artist-card .info-overlay {\n          position: absolute; inset: 0; display: flex; flex-direction: column; justify-content: flex-end;\n          padding: 0.75rem; background: linear-gradient(to top, rgba(0,0,0,0.9), rgba(0,0,0,0.5), transparent);\n          opacity: 0; transition: opacity 0.3s ease-in-out;\n        }\n        .artist-card:hover .info-overlay { opacity: 1; }\n\n        /* Modal Viewer */\n        .modal-overlay {\n            position: fixed; inset: 0; z-index: 50; background-color: rgba(0, 0, 0, 0.9);\n            backdrop-filter: blur(8px); display: flex; align-items: center; justify-content: center;\n            animation: fadeIn 0.3s ease-in-out;\n        }\n        .modal-content { position: relative; width: 100%; height: 100%; }\n        .modal-media-viewer {\n          position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);\n          width: 90vw; height: 85vh; display: flex; align-items: center; justify-content: center;\n        }\n        .modal-media-viewer img, .modal-media-viewer video {\n          max-width: 100%; max-height: 100%; object-fit: contain;\n        }\n        .modal-close-btn {\n          position: absolute; top: 1rem; right: 1rem; background: none; border: none; color: white;\n          cursor: pointer; z-index: 51;\n        }\n        .modal-nav-btn {\n          position: absolute; top: 50%; transform: translateY(-50%);\n          width: 3rem; height: 3rem; background-color: rgba(0,0,0,0.3); border-radius: 50%;\n          display: flex; align-items: center; justify-content: center; color: white;\n          border: none; cursor: pointer; transition: background-color 0.2s;\n        }\n        .modal-nav-btn:hover:not(:disabled) { background-color: rgba(0,0,0,0.6); }\n        .modal-nav-btn:disabled { opacity: 0.2; cursor: not-allowed; }\n        .modal-nav-btn.left { left: 1rem; }\n        .modal-nav-btn.right { right: 1rem; }\n        \n        /* Footer */\n        .app-footer { text-align: center; padding: 1rem; font-size: 0.75rem; color: var(--color-text-tertiary); border-top: 1px solid var(--color-border); }\n        .app-footer a { color: var(--color-accent); text-decoration: none; }\n        .app-footer a:hover { text-decoration: underline; }\n\n        /* --- 6. RESPONSIVE STYLES --- */\n        /* Description: Media queries to adapt the layout for different screen sizes. */\n        @media (min-width: 640px) { /* sm */\n            .container { max-width: 640px; }\n            .sm\\:text-4xl { font-size: 2.25rem; line-height: 2.5rem; }\n            .nft-grid { grid-template-columns: repeat(3, minmax(0, 1fr)); }\n        }\n        @media (min-width: 768px) { /* md */\n            .container { max-width: 768px; }\n            .nft-grid { grid-template-columns: repeat(4, minmax(0, 1fr)); }\n        }\n        @media (min-width: 1024px) { /* lg */\n            .container { max-width: 1024px; }\n            .nft-grid { grid-template-columns: repeat(5, minmax(0, 1fr)); }\n        }\n        @media (min-width: 1280px) { /* xl */\n            .container { max-width: 1280px; }\n            .nft-grid { grid-template-columns: repeat(6, minmax(0, 1fr)); }\n        }\n    </style>\n</head>\n<body>\n\n    <!-- \n    =================================================================\n    HTML STRUCTURE\n    This section defines the static layout of the application.\n    Each view is a <section> element that will be shown or hidden \n    by the JavaScript logic based on the current application state.\n    =================================================================\n    -->\n\n    <!-- HEADER SECTION -->\n    <!-- Description: The main navigation header, sticky at the top of the page. -->\n    <header id=\"app-header\" class=\"app-header\">\n        <!-- Header content will be dynamically generated by JavaScript -->\n    </header>\n\n    <!-- MAIN CONTENT AREA -->\n    <!-- Description: A container for all application views. Only one view is visible at a time. -->\n    <main class=\"container p-4\">\n        \n        <!-- VIEW: COLLECTION EXPLORER -->\n        <!-- Description: Allows users to input a Tezos contract address to view its NFTs. -->\n        <section id=\"view-explorer\">\n            <div class=\"text-center mb-8\">\n                <h2 class=\"text-3xl sm:text-4xl font-bold text-white tracking-tight\">NFT Explorer</h2>\n                <p class=\"mt-2 text-lg text-gray-400\">Paste a Tezos contract ID to discover and showcase a full collection.</p>\n            </div>\n            <form id=\"explorer-form\" class=\"max-w-xl mx-auto flex items-center gap-2 mb-8\">\n                <input id=\"explorer-input\" type=\"text\" class=\"input-field\" placeholder=\"e.g., KT1RJ6PbjHpwc3M5rw5s2Nbmefwbuwbdxton\" required>\n                <button id=\"explorer-submit\" type=\"submit\" class=\"btn\">Explore</button>\n            </form>\n            <div id=\"explorer-results\"></div>\n        </section>\n\n        <!-- VIEW: NEWTRO DROPS -->\n        <!-- Description: A curated gallery of NFT collections from the Newtro Collective. -->\n        <section id=\"view-newtro\" class=\"hidden\">\n            <div class=\"text-center mb-8\">\n                <h2 class=\"text-3xl sm:text-4xl font-bold text-white tracking-tight\">Newtro Collective Drops</h2>\n                <p class=\"mt-2 text-lg text-gray-400\">Our culture lives forever on the blockchain.</p>\n            </div>\n            <div id=\"newtro-menu\" class=\"flex flex-wrap justify-center gap-3 mb-8\"></div>\n            <div id=\"newtro-results\"></div>\n        </section>\n\n        <!-- VIEW: ARTIST CATALOG (INDEX) -->\n        <!-- Description: A directory of artists associated with the Newtro Collective. -->\n        <section id=\"view-artists\" class=\"hidden\">\n            <div class=\"text-center mb-8\">\n                <h2 class=\"text-3xl sm:text-4xl font-bold text-white tracking-tight\">INDEX</h2>\n                <p class=\"mt-2 text-lg text-gray-400\">Discover the artists behind the Newtro Arts Collective (S.E.E.D. artists included)</p>\n            </div>\n            <div id=\"artists-results\"></div>\n        </section>\n\n        <!-- VIEW: EXPERIMENTS (ARCHITYPES) -->\n        <!-- Description: An interactive tool for creating art with letter-based NFTs. -->\n        <section id=\"view-architypes\" class=\"hidden\">\n             <!-- Content generated by JS -->\n        </section>\n\n        <!-- VIEW: ONBOARDING (TUTORIALS) -->\n        <!-- Description: A list of helpful video tutorials for newcomers. -->\n        <section id=\"view-tutorials\" class=\"hidden\">\n            <div class=\"text-center mb-8\">\n                <h2 class=\"text-3xl sm:text-4xl font-bold text-white tracking-tight\">Onboarding</h2>\n                <p class=\"mt-2 text-lg text-gray-400\">Tutorials and Cryptobasics.</p>\n            </div>\n            <div id=\"tutorials-list\" class=\"max-w-4xl mx-auto grid gap-4\"></div>\n        </section>\n\n    </main>\n\n    <!-- FOOTER SECTION -->\n    <!-- Description: Contains credits and links to the data sources. -->\n    <footer class=\"app-footer\">\n        <p>Built as a framework-free showcase. Data provided by <a href=\"https://tzkt.io/\" target=\"_blank\" rel=\"noopener noreferrer\">TzKT API</a> & <a href=\"https://objkt.com/\" target=\"_blank\" rel=\"noopener noreferrer\">Objkt.com</a>.</p>\n    </footer>\n\n    <!-- MODAL CONTAINER -->\n    <!-- Description: A global container for modal dialogs, like the NFT viewer. Hidden by default. -->\n    <div id=\"modal-container\"></div>\n\n    <!-- GIF ENCODER SCRIPT -->\n    <!-- Description: External library needed for GIF export functionality in the Architypes composer. -->\n    <script type=\"module\">\n      try {\n        const { GIFEncoder, quantize, applyPalette } = await import('https://cdn.jsdelivr.net/npm/gifenc@1.0.3/dist/gifenc.esm.js');\n        window.GIFEncoder = { GIFEncoder, quantize, applyPalette };\n      } catch (e) {\n        console.error('Failed to load GIFEncoder library:', e);\n      }\n    </script>\n\n    <!-- \n    =================================================================\n    VANILLA JAVASCRIPT LOGIC\n    This single script contains all the logic to make the application \n    interactive. It manages state, fetches data, and updates the DOM.\n    =================================================================\n    -->\n    <script>\n        document.addEventListener('DOMContentLoaded', () => {\n\n            // --- 1. APPLICATION STATE & CONFIGURATION --- //\n            // Description: Centralized state management and constants.\n            const state = {\n                currentView: 'explorer',\n                isLoading: false,\n                error: null,\n                views: {\n                  explorer: { contractAddress: '', collectionInfo: null, nfts: null },\n                  newtro: { menuItems: [], selectedCollection: null },\n                  artists: { profiles: [] },\n                  architypes: { letterMap: null, backgroundVideoUrl: null, composedNfts: null },\n                },\n                modal: { isOpen: false, data: null, initialIndex: 0, type: null },\n            };\n\n            const CONFIG = {\n              API_BASE_TZKT: 'https://api.tzkt.io/v1',\n              API_BASE_OBJKT: 'https://data.objkt.com/v3/graphql',\n              IPFS_GATEWAYS: [\n                'https://dweb.link/ipfs/',\n                'https://gateway.pinata.cloud/ipfs/',\n                'https://cloudflare-ipfs.com/ipfs/',\n              ],\n              NEWTRO_CONTRACTS: [\n                \"KT1SnjkFfEjcJDAHXrj8GoLq174ZNjyKbXgG\", \"KT1Muk6E8Ma2nkZJjseFzp172aoCHr9frsjh\",\n                \"KT1C2rNotE5J4Db59CttRVim3JNR8jG5D9Jg\", \"KT1WiA72WSP5pCzVjEqhW2GRhBU3q5yRcHQf\",\n                \"KT1Ro7fyAmAiLmLignzzCeT9Q25UMgh9pWkf\", \"KT1J8M5XSf7neu3efyuQ9aywPXDuChWnMNLX\",\n                \"KT1QAty51CrHwSPQMs1fafHdYGLHK3Z7bsSG\", \"KT1CngY393gtBsE4Ynk3cGm1Mov55Z2aNo9\",\n                \"KT1VBCWocKcFbQEgtN9ioN5AwyWXGgdwsjDt\"\n              ],\n              ARCHITYPES_CONTRACT: 'KT1J7jm7weHeTCGyb3q2smVgkbpsftyqHXQx',\n              TUTORIALS: [\n                  { id: 'I7_NW0aFnBA', title: 'Cómo crear tu wallet en Coinbase', category: 'EVM' },\n                  { id: '-S5LwV1EMQM', title: 'Cómo registrar tu Basename', category: 'EVM' },\n                  { id: 'hT-Iqaxucjs', title: 'Cómo crear tu wallet Kukai de Tezos', category: 'Tezos' },\n                  { id: 'PrtIFx-xwOc', title: 'Cómo crear tu wallet Rainbow EVM', category: 'EVM' },\n                  { id: 'w1UMhZMxghI', title: 'Cómo hacer swap y bridge con Rainbow', category: 'EVM' },\n                  { id: 'o2mcpSUU9PQ', title: 'Cómo crear un perfil en OBJKT.com', category: 'Tezos' },\n                  { id: 'ufKk5hQy5wE', title: 'Cómo mintear en OBJKT.com', category: 'Tezos' },\n                  { id: 'lpGQXro2ykw', title: 'Cómo crear tu wallet Phantom de Solana', category: 'Solana' },\n                  { id: '5FGvQreFWq0', title: 'Cómo crear tu wallet Temple de Tezos', category: 'Tezos' },\n                  { id: '_jBs7h_bNMU', title: 'Cómo adquirir un Tezos Domain', category: 'Tezos' },\n              ]\n            };\n\n            // --- 2. DOM ELEMENT SELECTORS --- //\n            // Description: Centralized references to key parts of the HTML for manipulation.\n            const DOMElements = {\n                header: document.getElementById('app-header'),\n                views: {\n                    explorer: document.getElementById('view-explorer'),\n                    newtro: document.getElementById('view-newtro'),\n                    artists: document.getElementById('view-artists'),\n                    architypes: document.getElementById('view-architypes'),\n                    tutorials: document.getElementById('view-tutorials'),\n                },\n                explorer: {\n                    form: document.getElementById('explorer-form'),\n                    input: document.getElementById('explorer-input'),\n                    submit: document.getElementById('explorer-submit'),\n                    results: document.getElementById('explorer-results'),\n                },\n                newtro: {\n                  menu: document.getElementById('newtro-menu'),\n                  results: document.getElementById('newtro-results'),\n                },\n                artists: {\n                  results: document.getElementById('artists-results'),\n                },\n                tutorials: {\n                    list: document.getElementById('tutorials-list'),\n                },\n                modalContainer: document.getElementById('modal-container'),\n            };\n\n            // --- 3. HELPER & UTILITY FUNCTIONS --- //\n            // Description: General-purpose functions used across the application.\n\n            /**\n             * Caching Service\n             * Description: A simple wrapper for localStorage to implement a TTL (Time-To-Live)\n             * cache. This enables the Stale-While-Revalidate pattern for fast UI loads.\n             */\n            const cacheService = {\n                get: (key) => {\n                    const itemStr = localStorage.getItem(key);\n                    if (!itemStr) return { value: null, isStale: true };\n                    try {\n                        const item = JSON.parse(itemStr);\n                        const isStale = new Date().getTime() > item.expiry;\n                        return { value: item.value, isStale };\n                    } catch (e) {\n                        localStorage.removeItem(key);\n                        return { value: null, isStale: true };\n                    }\n                },\n                set: (key, value, ttlInSeconds) => {\n                    const item = {\n                        value,\n                        expiry: new Date().getTime() + ttlInSeconds * 1000,\n                    };\n                    localStorage.setItem(key, JSON.stringify(item));\n                },\n            };\n\n            /**\n             * Normalizes an IPFS URL to a list of gateway URLs.\n             * @param {string} url - The URL to normalize (e.g., ipfs://...)\n             * @returns {string[] | null} - An array of usable HTTP URLs or null.\n             */\n            const normalizeIpfsUrl = (url) => {\n                if (!url) return null;\n                if (url.startsWith('ipfs://')) {\n                    const hash = url.substring(7);\n                    return CONFIG.IPFS_GATEWAYS.map(gateway => `${gateway}${hash}`);\n                }\n                if (url.startsWith('http')) return [url];\n                return null;\n            };\n            \n            /**\n             * Executes a GraphQL query against the Objkt API.\n             * @param {string} query - The GraphQL query string.\n             * @param {object} variables - Variables for the query.\n             * @returns {Promise<any>} - The JSON response from the API.\n             */\n            const executeObjktQuery = async (query, variables) => {\n                const response = await fetch(CONFIG.API_BASE_OBJKT, {\n                    method: 'POST',\n                    headers: { 'Content-Type': 'application/json' },\n                    body: JSON.stringify({ query, variables }),\n                });\n                if (!response.ok) throw new Error('Objkt API network error.');\n                const json = await response.json();\n                if (json.errors) {\n                  console.error(\"GraphQL Error:\", json.errors);\n                  throw new Error(`GraphQL Error: ${json.errors[0].message}`);\n                }\n                return json;\n            };\n\n\n            // --- 4. API SERVICE FUNCTIONS --- //\n            // Description: Functions dedicated to fetching and processing data from external APIs.\n\n            /**\n             * Fetches token data for a contract from the TzKT API.\n             * @param {string} contractAddress - The KT1 address.\n             * @returns {Promise<object[]>} - A promise that resolves to an array of NFT objects.\n             */\n            const fetchTokensFromTzkt = async (contractAddress) => {\n                const response = await fetch(`${CONFIG.API_BASE_TZKT}/tokens?contract=${contractAddress}&limit=500&sort.desc=id`);\n                if (!response.ok) throw new Error(`Failed to fetch tokens from TzKT.`);\n                const data = await response.json();\n                return data\n                    .filter(token => token.metadata && token.metadata.name)\n                    .map(token => ({\n                        id: token.id,\n                        tokenId: token.tokenId,\n                        name: token.metadata.name,\n                        imageUrl: normalizeIpfsUrl(token.metadata.thumbnailUri || token.metadata.displayUri || token.metadata.artifactUri),\n                        displayUrl: normalizeIpfsUrl(token.metadata.displayUri || token.metadata.artifactUri),\n                        mime: null, // TzKT doesn't provide this\n                        contractAddress: token.contract.address,\n                        creator: { address: token.metadata?.creators?.[0] || 'N/A' },\n                    }))\n                    .filter(nft => nft.imageUrl && nft.imageUrl.length > 0);\n            };\n\n            /**\n             * Fetches rich collection info from the Objkt API.\n             * @param {string} address - The KT1 address.\n             * @returns {Promise<object>} - A promise that resolves to a collection info object.\n             */\n            const fetchCollectionInfoFromObjkt = async (address) => {\n                const query = `\n                  query GetGalleryCollectionInfoV2($address: String!) {\n                    collection(where: {address: {_eq: $address}}, limit: 1) {\n                      name description timestamp\n                      creator { address tzdomain alias twitter }\n                    }\n                  }`;\n                const result = await executeObjktQuery(query, { address });\n                const collection = result.data?.collection?.[0];\n                if (!collection) throw new Error(`Collection ${address} not found on Objkt.`);\n                return {\n                    address: address,\n                    alias: collection.name || 'Unnamed Collection',\n                    description: collection.description,\n                    creator: {\n                      address: collection.creator?.address || 'N/A',\n                      alias: collection.creator?.tzdomain || collection.creator?.alias,\n                    }\n                };\n            };\n\n            /**\n             * Fetches token data for a contract from the Objkt API.\n             * @param {string} contractAddress - The KT1 address.\n             * @returns {Promise<object[]>} - A promise that resolves to an array of NFT objects.\n             */\n            const fetchTokensFromObjkt = async (contractAddress) => {\n                const query = `\n                  query GetCollectionTokensV2($address: String!) {\n                    collection(where: {address: {_eq: $address}}, limit: 1) {\n                      tokens(limit: 500, order_by: {pk: desc}) {\n                        pk token_id name display_uri thumbnail_uri mime\n                        creators(limit: 1) { holder { address tzdomain alias } }\n                      }\n                    }\n                  }`;\n                const result = await executeObjktQuery(query, { address });\n                const tokens = result.data?.collection?.[0]?.tokens;\n                if (!tokens) return [];\n                return tokens\n                    .map(token => ({\n                        id: token.pk,\n                        tokenId: token.token_id,\n                        name: token.name,\n                        imageUrl: normalizeIpfsUrl(token.thumbnail_uri || token.display_uri),\n                        displayUrl: normalizeIpfsUrl(token.display_uri),\n                        mime: token.mime,\n                        contractAddress: contractAddress,\n                        creator: {\n                          address: token.creators?.[0]?.holder?.address || 'N/A',\n                          alias: token.creators?.[0]?.holder?.tzdomain || token.creators?.[0]?.holder?.alias\n                        }\n                    }))\n                    .filter(nft => nft.imageUrl && nft.imageUrl.length > 0);\n            };\n\n            /**\n             * Fetches profiles for a list of artist addresses from Objkt.\n             * @param {string[]} addresses - Array of tz addresses.\n             * @returns {Promise<object[]>} - A promise that resolves to an array of artist profile objects.\n             */\n             const fetchArtistProfiles = async (addresses) => {\n                const query = `\n                  query GetArtistProfiles($addresses: [String!]) {\n                    holder(where: {address: {_in: $addresses}}) {\n                      address tzdomain alias twitter instagram\n                    }\n                  }`;\n                const result = await executeObjktQuery(query, { addresses });\n                const profiles = result.data?.holder || [];\n                return profiles.map(p => ({\n                    address: p.address,\n                    alias: p.tzdomain || p.alias || p.address.slice(0, 8) + '...',\n                    pfpUrl: p.twitter ? `https://unavatar.io/twitter/${p.twitter.split('/').pop()}` : null,\n                    objktUrl: `https://objkt.com/profile/${p.tzdomain || p.address}`,\n                    twitterUrl: p.twitter,\n                    instagramUrl: p.instagram,\n                }));\n            };\n            \n            // --- 5. RENDER FUNCTIONS --- //\n            // Description: Functions that take state data and generate HTML to update the DOM.\n            \n            /** Renders a loading spinner. */\n            const renderLoader = (container) => {\n                container.innerHTML = `<div class=\"loader\"><div class=\"loader-spinner\"></div></div>`;\n            };\n\n            /** Renders an error message. */\n            const renderError = (container, message) => {\n                container.innerHTML = `<p class=\"error-message\">${message}</p>`;\n            };\n\n            /** Renders the main application header and navigation. */\n            const renderHeader = () => {\n                const navItems = [\n                    { view: 'explorer', text: 'Collection Explorer' },\n                    { view: 'newtro', text: 'Collective Drops' },\n                    { view: 'artists', text: 'Newtro Index' },\n                    { view: 'architypes', text: 'Experiments' },\n                    { view: 'tutorials', text: 'Onboarding' },\n                ];\n                DOMElements.header.innerHTML = `\n                    <div class=\"container\">\n                        <div class=\"header-content\">\n                            <div class=\"flex items-center gap-2\">\n                                <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"h-8 w-8 text-accent\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\" stroke-width=\"2\"><path stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10\" /></svg>\n                                <h1 class=\"text-xl font-bold text-white\">Tez Lab</h1>\n                            </div>\n                            <nav class=\"nav-buttons\">\n                                ${navItems.map(item => `\n                                    <button class=\"nav-button ${state.currentView === item.view ? 'active' : ''}\" data-view=\"${item.view}\">${item.text}</button>\n                                `).join('')}\n                            </nav>\n                        </div>\n                    </div>`;\n            };\n\n            /**\n             * Renders a grid of NFTs.\n             * @param {HTMLElement} container - The DOM element to render into.\n             * @param {object[]} nfts - The array of NFT objects to display.\n             * @param {function} onNftClick - Callback function for when an NFT is clicked.\n             */\n            const renderNftGrid = (container, nfts, onNftClick) => {\n                if (!nfts || nfts.length === 0) {\n                    container.innerHTML = `<p class=\"text-center text-gray-400\">No displayable artworks found.</p>`;\n                    return;\n                }\n                container.innerHTML = `<div class=\"nft-grid\"></div>`;\n                const grid = container.querySelector('.nft-grid');\n                nfts.forEach((nft, index) => {\n                    const card = document.createElement('div');\n                    card.className = 'nft-card';\n                    card.onclick = () => onNftClick(index);\n                    card.innerHTML = `\n                        <div class=\"nft-card-loader\"><div class=\"spinner\"></div></div>\n                        <div class=\"overlay\"><p class=\"overlay-text\">${nft.name}</p></div>\n                    `;\n                    grid.appendChild(card);\n\n                    const img = new Image();\n                    let currentGateway = 0;\n                    \n                    const tryLoadImage = () => {\n                      if(!nft.imageUrl || currentGateway >= nft.imageUrl.length) {\n                        card.querySelector('.nft-card-loader').innerHTML = 'Error';\n                        return;\n                      }\n                      img.src = nft.imageUrl[currentGateway];\n                    }\n\n                    img.onload = () => {\n                        card.querySelector('.nft-card-loader').remove();\n                        card.insertAdjacentElement('afterbegin', img);\n                    };\n                    img.onerror = () => {\n                      currentGateway++;\n                      tryLoadImage();\n                    }\n\n                    tryLoadImage();\n                });\n            };\n\n            /**\n             * Renders the information block for a collection.\n             * @param {object} info - The collection info object.\n             * @param {number} count - The number of NFTs in the collection.\n             * @returns {string} - The HTML string for the info block.\n             */\n            const getCollectionInfoHtml = (info, count) => {\n              if (!info) return '';\n              return `\n                <div class=\"mb-8 p-4 bg-dark-secondary rounded-lg border border-[var(--color-border)] max-w-4xl mx-auto animate-fade-in\">\n                    <h3 class=\"text-2xl font-bold text-accent\">${info.alias}</h3>\n                    ${info.description ? `<p class=\"text-sm text-gray-400 mt-2 whitespace-pre-wrap\">${info.description}</p>` : ''}\n                    <div class=\"mt-3 text-sm text-gray-400 space-y-1\">\n                        <p>Created by: <span class=\"font-mono text-gray-300\">${info.creator.alias || info.creator.address}</span></p>\n                        <p>Contract: <a href=\"https://tzkt.io/${info.address}\" target=\"_blank\" class=\"font-mono text-gray-300 hover:text-accent\">${info.address}</a></p>\n                        <p>This collection has ${count} artworks.</p>\n                    </div>\n                </div>`;\n            };\n\n            /** Renders the NFT Explorer view. */\n            const renderExplorerView = () => {\n                const { collectionInfo, nfts } = state.views.explorer;\n                const container = DOMElements.explorer.results;\n\n                if (state.isLoading) return renderLoader(container);\n                if (state.error) return renderError(container, state.error);\n\n                container.innerHTML = getCollectionInfoHtml(collectionInfo, nfts ? nfts.length : 0);\n                const gridContainer = document.createElement('div');\n                container.appendChild(gridContainer);\n                renderNftGrid(gridContainer, nfts, (index) => openModal('nft-viewer', { nfts, initialIndex: index }));\n            };\n\n            /** Renders the Newtro Drops view. */\n            const renderNewtroView = () => {\n                const { menuItems, selectedCollection } = state.views.newtro;\n                const menuContainer = DOMElements.newtro.menu;\n                const resultsContainer = DOMElements.newtro.results;\n\n                if (state.isLoading && menuItems.length === 0) return renderLoader(menuContainer);\n                \n                menuContainer.innerHTML = menuItems.map(item => `\n                  <button class=\"nav-button ${selectedCollection?.info.address === item.address ? 'active' : ''}\" data-address=\"${item.address}\">${item.alias}</button>\n                `).join('');\n\n                if (state.isLoading && selectedCollection === null) return renderLoader(resultsContainer);\n                if (state.error) return renderError(resultsContainer, state.error);\n\n                if (selectedCollection) {\n                  resultsContainer.innerHTML = getCollectionInfoHtml(selectedCollection.info, selectedCollection.nfts.length);\n                  const gridContainer = document.createElement('div');\n                  resultsContainer.appendChild(gridContainer);\n                  renderNftGrid(gridContainer, selectedCollection.nfts, (index) => openModal('nft-viewer', { nfts: selectedCollection.nfts, initialIndex: index }));\n                }\n            };\n            \n            /** Renders the Artist Catalog view. */\n            const renderArtistsView = () => {\n                const { profiles } = state.views.artists;\n                const container = DOMElements.artists.results;\n\n                if (state.isLoading) return renderLoader(container);\n                if (state.error) return renderError(container, state.error);\n\n                if (profiles.length === 0) {\n                  container.innerHTML = `<p class=\"text-center text-gray-400\">No artist profiles could be found.</p>`;\n                  return;\n                }\n\n                container.innerHTML = `<div class=\"nft-grid\"></div>`;\n                const grid = container.querySelector('.nft-grid');\n                profiles.forEach(artist => {\n                    const card = document.createElement('div');\n                    card.className = 'artist-card';\n                    card.title = `View works by ${artist.alias}`;\n                    card.onclick = () => openModal('artist-works', { artistAddress: artist.address, artistName: artist.alias });\n                    \n                    const pfpHtml = artist.pfpUrl \n                      ? `<img src=\"${artist.pfpUrl}\" alt=\"${artist.alias}'s profile\" onerror=\"this.style.display='none'; this.nextElementSibling.style.display='flex';\">` \n                      : '';\n                    const placeholderHtml = `<div style=\"background-color: #333; width: 100%; height: 100%; display: ${artist.pfpUrl ? 'none': 'flex'}; align-items: center; justify-content: center;\"><svg xmlns=\"http://www.w3.org/2000/svg\" class=\"w-16 h-16 text-white/40\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\" stroke-width=\"1\"><path stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z\" /></svg></div>`;\n\n                    card.innerHTML = `\n                        <div class=\"pfp-bg\">\n                           ${pfpHtml}\n                           ${placeholderHtml}\n                        </div>\n                        <div class=\"info-overlay\">\n                            <h3 class=\"font-bold text-white truncate\">${artist.alias}</h3>\n                            <div class=\"flex items-center justify-between mt-1\">\n                                <p class=\"text-xs text-gray-400 font-mono\">${artist.address.slice(0, 6)}...${artist.address.slice(-4)}</p>\n                                <!-- Social links can be added here -->\n                            </div>\n                        </div>\n                    `;\n                    grid.appendChild(card);\n                });\n            };\n\n            /** Renders the Architypes Composer view. */\n            const renderArchitypesView = () => {\n              const { backgroundVideoUrl, composedNfts } = state.views.architypes;\n              const container = DOMElements.views.architypes;\n              \n              const composedHtml = composedNfts ? `\n                <div class=\"flex flex-wrap items-center justify-center gap-2 bg-black/70 p-4 rounded-lg border border-[var(--color-border)] min-h-[8rem]\">\n                    ${composedNfts.map(item => {\n                        if (item === ' ') return `<div class=\"w-12 h-24\"></div>`;\n                        return `<div class=\"w-24 h-24 rounded-md overflow-hidden bg-gray-800\"><img src=\"${item.imageUrl[0]}\" alt=\"${item.name}\" class=\"w-full h-full object-cover\"></div>`;\n                    }).join('')}\n                </div>\n                <div class=\"mt-4\">\n                    <button id=\"architype-export-btn\" class=\"btn\">Export to PNG</button>\n                </div>\n              ` : '';\n              \n              container.innerHTML = `\n                <div class=\"relative overflow-hidden bg-dark-primary rounded-lg p-8\">\n                  ${backgroundVideoUrl ? `<video src=\"${backgroundVideoUrl}\" autoplay loop muted playsinline class=\"absolute top-0 left-0 w-full h-full object-cover z-0\"></video><div class=\"absolute inset-0 bg-dark-primary/70 z-10\"></div>` : ''}\n                  <div class=\"relative z-20\">\n                      <div class=\"text-center mb-8\">\n                          <h2 class=\"text-3xl sm:text-4xl font-bold text-white tracking-tight\">ARCHITYPES COMPOSER</h2>\n                      </div>\n                      <form id=\"architype-form\" class=\"max-w-xl mx-auto flex items-center gap-2 mb-8\">\n                          <input id=\"architype-input\" type=\"text\" class=\"input-field\" placeholder=\"Type a word...\">\n                          <button type=\"submit\" class=\"btn\">Compose</button>\n                      </form>\n                      <div id=\"architype-composed-output\" class=\"max-w-4xl mx-auto\">${composedHtml}</div>\n                  </div>\n                </div>\n              `;\n            };\n\n            /** Renders the Tutorials view. */\n            const renderTutorialsView = () => {\n                const container = DOMElements.tutorials.list;\n                const categoryStyles = {\n                    EVM: 'bg-[var(--color-evm-blue)]',\n                    Tezos: 'bg-[var(--color-tezos-green)] text-black',\n                    Solana: 'bg-[var(--color-solana-purple)]',\n                };\n                container.innerHTML = CONFIG.TUTORIALS.map(video => `\n                  <button class=\"w-full text-left p-4 rounded-lg border border-[var(--color-border)] transition-colors duration-200 ${categoryStyles[video.category] || 'bg-dark-secondary'}\" data-video-id=\"${video.id}\">\n                    <p class=\"font-medium\">${video.title}</p>\n                  </button>\n                `).join('');\n            };\n\n            /** Renders the entire application based on the current state. */\n            const renderApp = () => {\n                renderHeader();\n                Object.values(DOMElements.views).forEach(v => v.classList.add('hidden'));\n                DOMElements.views[state.currentView].classList.remove('hidden');\n\n                switch (state.currentView) {\n                    case 'explorer': renderExplorerView(); break;\n                    case 'newtro': renderNewtroView(); break;\n                    case 'artists': renderArtistsView(); break;\n                    case 'architypes': renderArchitypesView(); break;\n                    case 'tutorials': renderTutorialsView(); break;\n                }\n                addEventListeners(); // Re-add listeners for newly created elements\n            };\n            \n            // --- 6. MODAL LOGIC --- //\n            // Description: Functions to manage the opening, closing, and rendering of modals.\n\n            const openModal = (type, data) => {\n              state.modal = { isOpen: true, type, data };\n              renderModal();\n              document.body.style.overflow = 'hidden';\n            };\n\n            const closeModal = () => {\n              state.modal = { isOpen: false, type: null, data: null };\n              DOMElements.modalContainer.innerHTML = '';\n              document.body.style.overflow = 'auto';\n            };\n            \n            const renderModal = () => {\n                if (!state.modal.isOpen) return;\n                const { type, data } = state.modal;\n\n                let content = '';\n                if (type === 'nft-viewer') {\n                    content = renderNftViewerModal(data.nfts, data.initialIndex);\n                } else if (type === 'video-player') {\n                    content = renderVideoPlayerModal(data.videoId);\n                } else if (type === 'artist-works') {\n                  // This would be a more complex implementation, for now we can just show a placeholder\n                  content = `<div class=\"modal-content p-8 bg-dark-secondary rounded-lg\"><h2 class='text-white'>Loading works for ${data.artistName}...</h2></div>`;\n                  // A full implementation would fetch and display the artist's works here.\n                }\n\n                DOMElements.modalContainer.innerHTML = `\n                  <div class=\"modal-overlay\">\n                      ${content}\n                      <button class=\"modal-close-btn\" id=\"modal-close\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"32\" height=\"32\" fill=\"currentColor\" viewBox=\"0 0 16 16\"><path d=\"M2.146 2.854a.5.5 0 1 1 .708-.708L8 7.293l5.146-5.147a.5.5 0 0 1 .708.708L8.707 8l5.147 5.146a.5.5 0 0 1-.708.708L8 8.707l-5.146 5.147a.5.5 0 0 1-.708-.708L7.293 8z\"/></svg></button>\n                  </div>`;\n                \n                // Add listeners for the modal\n                DOMElements.modalContainer.querySelector('.modal-overlay').onclick = (e) => {\n                    if(e.target === e.currentTarget) closeModal();\n                };\n                document.getElementById('modal-close').onclick = closeModal;\n                document.onkeydown = (e) => { if (e.key === 'Escape') closeModal(); };\n            };\n\n            const renderNftViewerModal = (nfts, initialIndex) => {\n                let currentIndex = initialIndex;\n\n                const updateContent = () => {\n                  const nft = nfts[currentIndex];\n                  const modalContent = DOMElements.modalContainer.querySelector('.modal-content');\n                  if (!modalContent) return;\n                  modalContent.innerHTML = `\n                    <div class=\"modal-media-viewer\">\n                      ${nft.mime?.startsWith('video/')\n                        ? `<video src=\"${nft.displayUrl[0]}\" autoplay loop muted playsinline></video>`\n                        : `<img src=\"${nft.displayUrl[0]}\" alt=\"${nft.name}\">`\n                      }\n                    </div>\n                    <div class=\"absolute bottom-4 right-4 text-white text-right\">\n                        <p class=\"font-medium text-lg\">${nft.name}</p>\n                        <p class=\"text-sm text-gray-400\">by ${nft.creator.alias || nft.creator.address}</p>\n                    </div>\n                    <button class=\"modal-nav-btn left\" ${currentIndex === 0 ? 'disabled' : ''} id=\"modal-prev\">&lt;</button>\n                    <button class=\"modal-nav-btn right\" ${currentIndex === nfts.length - 1 ? 'disabled' : ''} id=\"modal-next\">&gt;</button>\n                  `;\n                  document.getElementById('modal-prev').onclick = () => { if(currentIndex > 0) { currentIndex--; updateContent(); } };\n                  document.getElementById('modal-next').onclick = () => { if(currentIndex < nfts.length - 1) { currentIndex++; updateContent(); } };\n                };\n                \n                setTimeout(updateContent, 0);\n                return `<div class=\"modal-content w-full h-full\"></div>`;\n            };\n\n             const renderVideoPlayerModal = (videoId) => {\n                return `\n                  <div class=\"relative w-full max-w-4xl aspect-video bg-black rounded-lg mx-4\">\n                    <iframe width=\"100%\" height=\"100%\" src=\"https://www.youtube.com/embed/${videoId}?autoplay=1&rel=0\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay;\" allowfullscreen></iframe>\n                  </div>\n                `;\n            };\n\n            // --- 7. EVENT HANDLERS & BUSINESS LOGIC --- //\n            // Description: Functions that respond to user interactions and orchestrate the application flow.\n            \n            /** Handles the NFT Explorer form submission. */\n            const handleExplorerSubmit = async (e) => {\n                e.preventDefault();\n                const address = DOMElements.explorer.input.value.trim();\n                if (!address.startsWith('KT1')) {\n                    state.error = 'Please enter a valid Tezos contract address (starting with KT1).';\n                    state.isLoading = false;\n                    renderApp();\n                    return;\n                }\n                state.isLoading = true;\n                state.error = null;\n                state.views.explorer = { contractAddress: address, collectionInfo: null, nfts: null };\n                renderApp();\n\n                try {\n                    const infoPromise = fetchCollectionInfoFromObjkt(address);\n                    const tokensPromise = fetchTokensFromObjkt(address).catch(() => fetchTokensFromTzkt(address));\n                    const [info, tokens] = await Promise.all([infoPromise, tokensPromise]);\n                    state.views.explorer.collectionInfo = info;\n                    state.views.explorer.nfts = tokens;\n                } catch (err) {\n                    state.error = err.message;\n                } finally {\n                    state.isLoading = false;\n                    renderApp();\n                }\n            };\n\n            /** Handles selecting a collection in the Newtro Drops view. */\n            const handleNewtroSelect = async (address) => {\n                state.isLoading = true;\n                state.error = null;\n                state.views.newtro.selectedCollection = null;\n                renderApp();\n\n                try {\n                  const info = state.views.newtro.menuItems.find(i => i.address === address);\n                  const nfts = await fetchTokensFromObjkt(address).catch(() => fetchTokensFromTzkt(address));\n                  state.views.newtro.selectedCollection = { info, nfts };\n                } catch(err) {\n                  state.error = err.message;\n                } finally {\n                  state.isLoading = false;\n                  renderApp();\n                }\n            };\n\n            /** Handles composing a word in the Architypes view. */\n            const handleArchitypeCompose = () => {\n                const inputText = document.getElementById('architype-input').value;\n                if (!state.views.architypes.letterMap || !inputText) {\n                  state.views.architypes.composedNfts = null;\n                } else {\n                  state.views.architypes.composedNfts = inputText.toUpperCase().split('').map(char => {\n                    if (char === ' ') return ' ';\n                    return state.views.architypes.letterMap[char] || null;\n                  }).filter(Boolean);\n                }\n                renderApp();\n            };\n\n            /** Changes the current view of the application. */\n            const switchView = async (view) => {\n                if (state.currentView === view) return;\n                state.currentView = view;\n                state.isLoading = true;\n                state.error = null;\n                renderApp();\n                \n                // Fetch data for the new view if it's not already loaded\n                if (view === 'newtro' && state.views.newtro.menuItems.length === 0) {\n                  try {\n                    const promises = CONFIG.NEWTRO_CONTRACTS.map(addr => fetchCollectionInfoFromObjkt(addr).catch(() => ({ address: addr, alias: addr.slice(0, 8) })) );\n                    state.views.newtro.menuItems = await Promise.all(promises);\n                  } catch (e) { state.error = e.message; }\n                } else if (view === 'artists' && state.views.artists.profiles.length === 0) {\n                    const cached = cacheService.get('newtroArtistProfiles');\n                    if (cached.value) {\n                      state.views.artists.profiles = cached.value;\n                      if (cached.isStale) { // revalidate in background\n                        fetchNewtroArtistProfiles().then(profiles => {\n                            state.views.artists.profiles = profiles;\n                            cacheService.set('newtroArtistProfiles', profiles, 3600);\n                            if(state.currentView === 'artists') renderApp(); // re-render if still on page\n                        });\n                      }\n                    } else {\n                      try {\n                        const profiles = await fetchNewtroArtistProfiles();\n                        state.views.artists.profiles = profiles;\n                        cacheService.set('newtroArtistProfiles', profiles, 3600);\n                      } catch (e) { state.error = e.message; }\n                    }\n                } else if (view === 'architypes' && !state.views.architypes.letterMap) {\n                   try {\n                     const tokens = await fetchTokensFromTzkt(CONFIG.ARCHITYPES_CONTRACT);\n                     const backgroundNft = tokens.find(t => t.tokenId === '10');\n                     state.views.architypes.backgroundVideoUrl = backgroundNft?.displayUrl?.[0] || null;\n                     state.views.architypes.letterMap = tokens.reduce((acc, token) => {\n                       const char = token.name.trim().toUpperCase();\n                       if (char.length === 1 && char >= 'A' && char <= 'Z') acc[char] = token;\n                       return acc;\n                     }, {});\n                   } catch(e) { state.error = e.message; }\n                }\n\n                state.isLoading = false;\n                renderApp();\n            };\n\n            /** Helper function to fetch all Newtro artist profiles. */\n            const fetchNewtroArtistProfiles = async () => {\n              const tokenPromises = CONFIG.NEWTRO_CONTRACTS.map(addr => fetchTokensFromObjkt(addr).catch(() => []));\n              const allTokens = (await Promise.all(tokenPromises)).flat();\n              const uniqueAddresses = [...new Set(allTokens.map(nft => nft.creator.address).filter(Boolean))];\n              const profiles = await fetchArtistProfiles(uniqueAddresses);\n              return profiles.sort((a, b) => a.alias.localeCompare(b.alias));\n            };\n\n            // --- 8. EVENT LISTENER SETUP --- //\n            // Description: Attaches event listeners to the DOM. Needs to be re-run after re-renders.\n            const addEventListeners = () => {\n                // Header navigation\n                document.querySelectorAll('.nav-button').forEach(btn => {\n                    btn.onclick = () => switchView(btn.dataset.view);\n                });\n\n                // View-specific listeners\n                if (state.currentView === 'explorer') {\n                    DOMElements.explorer.form.onsubmit = handleExplorerSubmit;\n                }\n                if (state.currentView === 'newtro') {\n                  document.querySelectorAll('#newtro-menu .nav-button').forEach(btn => {\n                    btn.onclick = () => handleNewtroSelect(btn.dataset.address);\n                  });\n                }\n                if (state.currentView === 'architypes') {\n                  document.getElementById('architype-form').onsubmit = (e) => { e.preventDefault(); handleArchitypeCompose(); };\n                }\n                if (state.currentView === 'tutorials') {\n                    document.querySelectorAll('#tutorials-list button').forEach(btn => {\n                        btn.onclick = () => openModal('video-player', { videoId: btn.dataset.videoId });\n                    });\n                }\n            };\n            \n            // --- 9. INITIALIZATION --- //\n            // Description: The entry point that kicks off the application.\n            const init = () => {\n                console.log('Tez Lab (Standalone) Initialized');\n                switchView('explorer'); // Start on the explorer page\n            };\n\n            init();\n        });\n    </script>\n</body>\n</html>"
}
