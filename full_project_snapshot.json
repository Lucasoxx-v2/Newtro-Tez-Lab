{
  "index.tsx": "import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport App from './App';\n\nconst rootElement = document.getElementById('root');\nif (!rootElement) {\n  throw new Error(\"Could not find root element to mount to\");\n}\n\nconst root = ReactDOM.createRoot(rootElement);\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);",
  "metadata.json": {
    "name": "Copy of Tezos NFT Visualizer",
    "description": "An interactive, aesthetically clean single-page application to visualize NFT collections from the Tezos blockchain, interacting directly with the TzKT API.",
    "requestFramePermissions": []
  },
  "index.html": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Tez Playground</title>\n    <script src=\"https://cdn.tailwindcss.com\"></script>\n    <script>\n      tailwind.config = {\n        theme: {\n          extend: {\n            colors: {\n              'accent': '#bcfe04',\n              'dark-primary': '#121212',\n              'dark-secondary': '#1a1a1a',\n              'evm-blue': '#485de4',\n              'tezos-green': '#d1f121',\n              'solana-purple': '#470f4f',\n            },\n            fontFamily: {\n              'sans': ['Inter', 'sans-serif'],\n            },\n            keyframes: {\n              fadeIn: {\n                '0%': { opacity: '0' },\n                '100%': { opacity: '1' },\n              },\n              progress: {\n                '0%': { width: '0%' },\n                '100%': { width: '100%' },\n              }\n            },\n            animation: {\n              'fade-in': 'fadeIn 0.5s ease-in-out',\n              'progress': 'progress 7s linear forwards',\n            },\n          }\n        }\n      }\n    </script>\n    <link rel=\"preconnect\" href=\"https://fonts.googleapis.com\">\n    <link rel=\"preconnect\" href=\"https://fonts.gstatic.com\" crossorigin>\n    <link href=\"https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap\" rel=\"stylesheet\">\n    <style>\n      /* Hide arrows from number inputs */\n      input[type=number]::-webkit-inner-spin-button,\n      input[type=number]::-webkit-outer-spin-button {\n        -webkit-appearance: none;\n        margin: 0;\n      }\n      input[type=number] {\n        -moz-appearance: textfield;\n      }\n    </style>\n  <script type=\"importmap\">\n{\n  \"imports\": {\n    \"react/\": \"https://aistudiocdn.com/react@^19.1.1/\",\n    \"react\": \"https://aistudiocdn.com/react@^19.1.1\",\n    \"react-dom/\": \"https://aistudiocdn.com/react-dom@^19.1.1/\"\n  }\n}\n</script>\n</head>\n  <body class=\"bg-dark-primary text-gray-200 font-sans\">\n    <div id=\"root\"></div>\n    <script type=\"module\" src=\"/index.tsx\"></script>\n  </body>\n</html>",
  "App.tsx": "import React, { useState } from 'react';\nimport Header from './components/Header';\nimport CollectionExplorer from './components/CollectionExplorer';\nimport Architypes from './components/Architypes';\nimport NewtroDrops from './components/NewtroDrops';\nimport ArtistCatalog from './components/ArtistCatalog';\nimport Tutorials from './components/Tutorials';\n\nexport type View = 'explorer' | 'architypes' | 'newtro' | 'artists' | 'tutorials';\n\nconst App: React.FC = () => {\n  const [currentView, setCurrentView] = useState<View>('explorer');\n\n  return (\n    <div className=\"min-h-screen bg-dark-primary text-gray-200\">\n      <Header currentView={currentView} setCurrentView={setCurrentView} />\n      <main className=\"p-4 sm:p-6 lg:p-8 container mx-auto\">\n        {currentView === 'explorer' && <CollectionExplorer />}\n        {currentView === 'newtro' && <NewtroDrops />}\n        {currentView === 'artists' && <ArtistCatalog />}\n        {currentView === 'tutorials' && <Tutorials />}\n        {currentView === 'architypes' && <Architypes />}\n\n      </main>\n      <footer className=\"text-center p-4 text-xs text-gray-500 border-t border-gray-800\">\n        <p>Built with React & Tailwind CSS. Data provided by <a href=\"https://tzkt.io/\" target=\"_blank\" rel=\"noopener noreferrer\" className=\"text-accent hover:underline\">TzKT API</a> & <a href=\"https://objkt.com/\" target=\"_blank\" rel=\"noopener noreferrer\" className=\"text-accent hover:underline\">Objkt.com</a>.</p>\n      </footer>\n    </div>\n  );\n};\n\nexport default App;",
  "types.ts": "export interface TzKtToken {\n  id: number;\n  contract: {\n    alias: string;\n    address: string;\n  };\n  tokenId: string;\n  standard: string;\n  metadata: {\n    name: string;\n    description: string;\n    displayUri?: string;\n    artifactUri?: string;\n    thumbnailUri?: string;\n    creators?: string[];\n    [key: string]: unknown;\n  };\n}\n\nexport interface Nft {\n  id: number;\n  tokenId: string;\n  name: string;\n  imageUrl: string[] | null;\n  displayUrl: string[] | null;\n  mime: string | null;\n  contractAddress: string;\n  creator: {\n    address: string;\n    alias?: string;\n  };\n}\n\nexport interface ContractInfo {\n  alias: string;\n  address: string;\n  description?: string;\n  timestamp?: string;\n  creator: {\n    address: string;\n    alias?: string;\n    twitter?: string;\n  };\n}\n\nexport interface AccountInfo {\n  address: string;\n  alias?: string;\n  domain?: {\n    name: string;\n  };\n}\n\nexport interface ArtistProfile {\n  address: string;\n  alias: string;\n  pfpUrl: string | null;\n  objktUrl: string;\n  twitterUrl: string | null;\n  instagramUrl: string | null;\n}\n\nexport interface TutorialVideo {\n  id: string;\n  title: string;\n  category: 'Tezos' | 'EVM' | 'Solana' | 'General';\n}",
  "services/tzktService.ts": "import type { TzKtToken, Nft, ContractInfo, AccountInfo } from '../types';\n\nconst API_BASE_URL = 'https://api.tzkt.io/v1';\nconst COLLECTION_TOKEN_LIMIT = 500;\n\nconst IPFS_GATEWAYS = [\n  'https://dweb.link/ipfs/',\n  'https://gateway.pinata.cloud/ipfs/',\n  'https://cloudflare-ipfs.com/ipfs/',\n];\n\nexport const normalizeIpfsUrl = (url: string | undefined): string[] | null => {\n  if (!url) return null;\n  if (url.startsWith('ipfs://')) {\n    const hash = url.substring(7);\n    return IPFS_GATEWAYS.map(gateway => `${gateway}${hash}`);\n  }\n  if (url.startsWith('http')) {\n    return [url];\n  }\n  return null;\n};\n\nexport const fetchContractInfoFromTzkt = async (address: string): Promise<ContractInfo> => {\n  const contractResponse = await fetch(`${API_BASE_URL}/contracts/${address}`);\n  if (!contractResponse.ok) {\n    throw new Error(`Failed to fetch contract info for ${address} from TzKT.`);\n  }\n  const contractData = await contractResponse.json();\n  const creatorAddress = contractData.creator?.address;\n\n  if (!creatorAddress) {\n    return {\n      address,\n      alias: contractData.alias || 'Unnamed Collection',\n      creator: {\n        address: 'N/A',\n      },\n    };\n  }\n  \n  const accountResponse = await fetch(`${API_BASE_URL}/accounts/${creatorAddress}`);\n  const accountData: AccountInfo = accountResponse.ok ? await accountResponse.json() : {};\n\n  return {\n    address,\n    alias: contractData.alias || 'Unnamed Collection',\n    description: `Description not available via TzKT. Try searching on objkt.com.`,\n    creator: {\n      address: creatorAddress,\n      alias: accountData.alias || accountData.domain?.name,\n    },\n  };\n};\n\n\nexport const fetchTokens = async (contractAddress: string, limit: number = COLLECTION_TOKEN_LIMIT): Promise<Nft[]> => {\n  const response = await fetch(`${API_BASE_URL}/tokens?contract=${contractAddress}&limit=${limit}&sort.desc=id`);\n  if (!response.ok) {\n    throw new Error(`Failed to fetch tokens for contract ${contractAddress}`);\n  }\n  const data: TzKtToken[] = await response.json();\n  \n  const nfts: Nft[] = data\n    .filter(token => token.metadata && token.metadata.name)\n    .map(token => {\n      const creatorAddress = token.metadata?.creators?.[0] || 'N/A';\n      return {\n        id: token.id,\n        tokenId: token.tokenId,\n        name: token.metadata.name,\n        imageUrl: normalizeIpfsUrl(token.metadata.thumbnailUri || token.metadata.displayUri || token.metadata.artifactUri),\n        displayUrl: normalizeIpfsUrl(token.metadata.displayUri || token.metadata.artifactUri),\n        // FIX: Add missing 'mime' property to satisfy the Nft type. TzKT token endpoint doesn't provide this.\n        mime: null,\n        contractAddress: token.contract.address,\n        creator: {\n          address: creatorAddress,\n        },\n      };\n    });\n\n  return nfts.filter(nft => nft.imageUrl && nft.imageUrl.length > 0);\n};",
  "components/Header.tsx": "import React from 'react';\nimport type { View } from '../App';\n\ninterface HeaderProps {\n  currentView: View;\n  setCurrentView: (view: View) => void;\n}\n\nconst NavButton: React.FC<{\n    view: View;\n    currentView: View;\n    onClick: (view: View) => void;\n    children: React.ReactNode;\n}> = ({ view, currentView, onClick, children }) => (\n    <button\n      onClick={() => onClick(view)}\n      className={`px-4 py-2 rounded-md text-sm font-medium transition-colors duration-200 ${\n        currentView === view\n          ? 'bg-accent text-dark-primary'\n          : 'bg-transparent text-gray-300 hover:bg-dark-secondary hover:text-white'\n      }`}\n    >\n      {children}\n    </button>\n);\n\n\nconst Header: React.FC<HeaderProps> = ({ currentView, setCurrentView }) => {\n  return (\n    <header className=\"bg-dark-secondary/80 backdrop-blur-sm sticky top-0 z-40 border-b border-gray-700\">\n      <div className=\"container mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"flex items-center justify-between h-16\">\n          <div className=\"flex items-center space-x-2\">\n            <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-8 w-8 text-accent\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\" strokeWidth={2}>\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10\" />\n            </svg>\n            <h1 className=\"text-xl font-bold text-white\">Tez Lab</h1>\n          </div>\n          <nav className=\"flex items-center space-x-1 bg-gray-800 p-1 rounded-lg\">\n            <NavButton view=\"explorer\" currentView={currentView} onClick={setCurrentView}>Collection Explorer</NavButton>\n            <NavButton view=\"newtro\" currentView={currentView} onClick={setCurrentView}>Collective Drops</NavButton>\n            <NavButton view=\"artists\" currentView={currentView} onClick={setCurrentView}>Newtro Index</NavButton>\n            <NavButton view=\"architypes\" currentView={currentView} onClick={setCurrentView}>Experiments</NavButton>\n            <NavButton view=\"tutorials\" currentView={currentView} onClick={setCurrentView}>Onboarding</NavButton>\n          </nav>\n        </div>\n      </div>\n    </header>\n  );\n};\n\nexport default Header;",
  "components/CollectionExplorer.tsx": "import React, { useState, useCallback } from 'react';\n// FIX: import fetchContractInfoFromTzkt to get collection info from TzKT as a fallback.\nimport { fetchTokens, fetchContractInfoFromTzkt } from '../services/tzktService';\nimport { fetchCollectionInfo, fetchTokensFromObjkt } from '../services/objktService';\nimport type { Nft, ContractInfo } from '../types';\nimport NftGrid from './NftGrid';\nimport ModalViewer from './ModalViewer';\nimport Loader from './Loader';\nimport { Button } from './ui/Button';\nimport { Input } from './ui/Input';\n\nconst CollectionExplorer: React.FC = () => {\n  const [contractAddress, setContractAddress] = useState<string>('');\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n  const [error, setError] = useState<string | null>(null);\n  const [collectionInfo, setCollectionInfo] = useState<ContractInfo | null>(null);\n  const [nfts, setNfts] = useState<Nft[] | null>(null);\n\n  const [isModalOpen, setIsModalOpen] = useState<boolean>(false);\n  const [selectedNftIndex, setSelectedNftIndex] = useState<number>(0);\n\n  const handleFetchCollection = useCallback(async () => {\n    if (!contractAddress.startsWith('KT1')) {\n      setError('Please enter a valid Tezos contract address (starting with KT1).');\n      return;\n    }\n\n    setIsLoading(true);\n    setError(null);\n    setCollectionInfo(null);\n    setNfts(null);\n\n    try {\n      const collectionInfoPromise = fetchCollectionInfo(contractAddress).catch(objktError => {\n        console.warn(\"Could not fetch rich info from Objkt, falling back to TzKT.\", objktError);\n        return null;\n      });\n\n      const tokensPromise = fetchTokensFromObjkt(contractAddress).catch(e => {\n        console.warn(`Objkt token fetch failed for ${contractAddress}, falling back to TzKT`, e);\n        return fetchTokens(contractAddress); // Fallback\n      });\n\n      const [info, tokenData] = await Promise.all([collectionInfoPromise, tokensPromise]);\n\n      setNfts(tokenData);\n      \n      if (info) {\n        setCollectionInfo(info);\n      } else {\n        // If Objkt collection info fails completely, use basic info from TzKT\n        // FIX: Call fetchContractInfoFromTzkt which returns ContractInfo, not fetchTokens which returns Nft[].\n        